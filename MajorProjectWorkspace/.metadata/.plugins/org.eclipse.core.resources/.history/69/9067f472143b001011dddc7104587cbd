package com.product.serviceimpl;

import java.util.List;
import java.util.Optional;

import org.apache.catalina.mbeans.MBeanUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.product.dto.ProductDto;
import com.product.entity.Categories;
import com.product.entity.Product;
import com.product.repo.CategoryRepo;
import com.product.repo.ProductRepo;
import com.product.serviceinterface.ProductServiceInterface;

@Service
public class ProductServiceImpl implements ProductServiceInterface {

	@Autowired
	private ProductRepo productRepo;
	
	@Autowired
	private CategoryRepo categoryRepo;

	@Override
	public List<ProductDto> getProductDetailsBasedOnCategoryId(Long id) {

		List<ProductDto> retriveProductsBasedOnCategoryId = productRepo.retriveProductsBasedOnCategoryId(id);

		if (retriveProductsBasedOnCategoryId.isEmpty()) {

			return null;
		}

		return retriveProductsBasedOnCategoryId;
	}

	@Override
	public boolean saveProducts(ProductDto productDto) {
	    Product product = new Product();

	    BeanUtils.copyProperties(productDto, product);

	    Optional<Categories> optionalCategory = categoryRepo.findById(productDto.getCategoryId());

	    if (optionalCategory.isEmpty()) {
	        throw new RuntimeException("Invalid category ID: " + productDto.getCategoryId());
	    }

	    product.setCategory(optionalCategory.get());

	    Product savedProduct = productRepo.save(product);

	    return savedProduct.getProductId() != null;
	}


	@Override
	public List<Product> getProductNames(String name) {

		List<Product> retriveProductsBasedOnProductName = productRepo.retriveProductsBasedOnProductName(name);

		if (retriveProductsBasedOnProductName.isEmpty()) {
			return null;
		}
		return retriveProductsBasedOnProductName;
	}

	@Override
	public List<Product> getProductsById(Long id) {

		List<Product> retriveProductsBasedOnCategoryId = productRepo.retriveProductsBasedOnCategoryId(id);

		if (retriveProductsBasedOnCategoryId.isEmpty()) {

			return null;
		}

		return retriveProductsBasedOnCategoryId;
	}

}
